#LRC - Learning Resource Center (library) 

#PROJECT TITLE:

LRC Service Planner — A web program designed to help 
students and faculty manage their LRC needs, making 
it easier to plan services and avoid physical trips 
for simple tasks.

#PROBLEM STATEMENT:

Students and teachers often find it hard to manage 
their library needs because they have to go to the
LRC in person for simple tasks like reserving spaces, 
borrowing items, or checking availability. This takes
up extra time and causes inconvenience, especially 
with busy schedules. A program is needed to make these 
services easier and more accessible online.

#PROJECT OBJECTIVES:

• Make LRC services easier to access.
• Save time for students and teachers.
•Keep track of reservations and borrowed items.
• Share updates quickly with users.
•Remind users about returns and bookings.
• Give students and teachers a simple online tool for LRC needs.

#PLANNED FEATURES:

• Announcements: Send timely news about sudden library closures, new services, or other important updates.

• LRC Auditorium Reservations: Allow users to book the auditorium for school projects like presentations, group work, and role-playing.

• Printing Services: Provide real-time information on the availability of ink and paper.

• Borrowing: Let people reserve books, computers, and other items ahead of time.

• Reminders: Send automatic reminders to ensure borrowed items are returned on time.

#PLANNED INPUTS AND OUTPUTS:

Input (users):

User logs in successfully.

User selects 2 (Reserve Auditorium) from the menu.

User enters date and time for reservation.

User selects 3 (Borrow Item) and chooses a laptop with a return date.

User selects 5 (Check Reminders).

User selects 6 (Exit Program).


Output (system responses):

“Welcome to LRC Service Planner”

“Auditorium reservation confirmed for chosen date and time.”

“Item borrowed successfully. ”

“Reminder: You have an upcoming reservation and a borrowed item due on *date*”

“Goodbye!”

#LOGIC PLAN (PSEUDOCODE): 

START PROGRAM

CREATE empty list called Reservations
CREATE empty list called Borrowed_Items
CREATE empty list called Announcements

FUNCTION Add_Announcement
    PROMPT admin for Announcement Text
    ADD Announcement Text to Announcements list
END FUNCTION

FUNCTION Show_Announcements
    FOR each Announcement in Announcements list
        DISPLAY Announcement
    END FOR
END FUNCTION

FUNCTION Reserve_Auditorium
    PROMPT user for Date and Time
    CHECK if Date and Time are already in Reservations
    IF not reserved THEN
        ADD {Date, Time, "Auditorium"} to Reservations
        DISPLAY "Auditorium reservation confirmed"
    ELSE
        DISPLAY "Auditorium not available, choose another slot"
    END IF
END FUNCTION

FUNCTION Borrow_Item
    PROMPT user for Item Name
    PROMPT user for Return Date
    CHECK if Item is already borrowed
    IF available THEN
        ADD {Item Name, Return Date} to Borrowed_Items
        DISPLAY "Item borrowed successfully"
    ELSE
        DISPLAY "Item not available"
    END IF
END FUNCTION

FUNCTION Show_Borrowed_Items
    FOR each Item in Borrowed_Items
        DISPLAY Item Name and Return Date
    END FOR
END FUNCTION

FUNCTION Reminder_Check
    GET Today’s Date
    FOR each Item in Borrowed_Items
        CALCULATE Days_Left = Return Date - Today
        IF Days_Left <= 1 THEN
            DISPLAY "⚠ Reminder: Return " + Item Name + " tomorrow!"
        END IF
    END FOR
END FUNCTION

REPEAT
    DISPLAY Menu Options:
        1 – View Announcements
        2 – Reserve Auditorium
        3 – Borrow Item
        4 – View Borrowed Items
        5 – Check Reminders
        6 – Exit Program
    PROMPT user for choice

    IF choice = 1 THEN
        CALL Show_Announcements
    ELSE IF choice = 2 THEN
        CALL Reserve_Auditorium
    ELSE IF choice = 3 THEN
        CALL Borrow_Item
    ELSE IF choice = 4 THEN
        CALL Show_Borrowed_Items
    ELSE IF choice = 5 THEN
        CALL Reminder_Check
    ELSE IF choice = 6 THEN
        DISPLAY "Goodbye!"
        EXIT PROGRAM
    ELSE
        DISPLAY "Invalid choice. Try again."
UNTIL user chooses Exit

END PROGRAM

